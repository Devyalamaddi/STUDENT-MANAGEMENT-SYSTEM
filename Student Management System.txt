#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <cstring>

using namespace std;

class AcademicStudent {
    int DOB; // Date of Birth
    string Name, Class, Div;
    long telenumber;
    static int count;
public:
    int Rollnumber;
    
    AcademicStudent() { count++; }

    void read() {
        cout << "\nEnter the Student's name: ";
        cin >> Name;
        cout << "Enter the Student's roll number: ";
        cin >> Rollnumber;
        cout << "Enter the Student's Date of Birth (DDMMYY): ";
        cin >> DOB;
        cout << "Enter the Student's Class: ";
        cin >> Class;
        cout << "Enter the Student's Division: ";
        cin >> Div;
        cout << "Enter marks in 12th Standard: ";
        cin >> Marks;
        cout << "Enter marks in competitive exam (CET/JEE): ";
        cin >> Marks1;
        cout << "Enter marks in 10th Standard: ";
        cin >> Marks2;
        cout << "Enter the student's telephone number: ";
        cin >> telenumber;
    }

    void display() const {
        cout << "Student's name: " << Name << "\n"
             << "Roll number: " << Rollnumber << "\n"
             << "Class: " << Class << "\n"
             << "Division: " << Div << "\n"
             << "Telephone number: " << telenumber << "\n"
             << "Marks in 12th Standard: " << Marks << "\n"
             << "Marks in competitive exam (CET/JEE): " << Marks1 << "\n"
             << "Marks in 10th Standard: " << Marks2 << "\n";
    }

    ~AcademicStudent() { count--; }

    static void displayCount() {
        cout << "Total number of students: " << count << endl;
    }
};
int AcademicStudent::count = 0;

class PersonalStudent : public AcademicStudent {
    string father, mother, sibling, Bloodgroup;
public:
    void read() {
        cout << "Enter the Student's Bloodgroup: ";
        cin >> Bloodgroup;
        cout << "Enter the name of your father: ";
        cin >> father;
        cout << "Enter the name of your mother: ";
        cin >> mother;
        cout << "Enter the name of your siblings (if any): ";
        cin >> sibling;
    }

    void display() const {
        cout << "Blood group: " << Bloodgroup << "\n"
             << "Father's name: " << father << "\n"
             << "Mother's name: " << mother << "\n"
             << "Sibling's name: " << sibling << "\n";
    }
};

class Achievement : public PersonalStudent {
    vector<int> prizes; // Store prizes in a vector for flexibility
public:
    void read() {
        int prizeCount;
        cout << "Enter the number of different prize categories: ";
        cin >> prizeCount;
        prizes.resize(prizeCount);
        for (int i = 0; i < prizeCount; ++i) {
            cout << "Enter the number of prizes won in category " << i + 1 << ": ";
            cin >> prizes[i];
        }
    }

    void display() const {
        for (size_t i = 0; i < prizes.size(); ++i) {
            cout << "Prizes won in category " << i + 1 << ": " << prizes[i] << endl;
        }
    }

    friend void search(int key, const vector<Achievement>& students);
};

void search(int key, const vector<Achievement>& students) {
    // Search for a student by roll number
    for (const auto& student : students) {
        if (key == student.Rollnumber) {
            student.AcademicStudent::display();
            student.PersonalStudent::display();
            student.display();
            return;
        }
    }
    cout << "Student not found!" << endl;
}

class Result {
public:
    virtual void read() = 0;
    virtual void display() const = 0;
};

class TotalMarks : public Result {
    vector<int> marks; // Use vector for dynamic subject count
public:
    void read() override {
        int subjectCount;
        cout << "Enter the number of subjects: ";
        cin >> subjectCount;
        marks.resize(subjectCount);
        for (int i = 0; i < subjectCount; ++i) {
            cout << "Enter mark for Subject " << i + 1 << ": ";
            cin >> marks[i];
        }
    }

    void display() const override {
        int total = 0;
        for (const auto& mark : marks) {
            total += mark;
        }
        cout << "Total Marks: " << total << "/" << (marks.size() * 100) << endl;
    }
};

class Percentage : public Result {
    vector<int> marks;
public:
    void read() override {
        int subjectCount;
        cout << "Enter the number of subjects: ";
        cin >> subjectCount;
        marks.resize(subjectCount);
        for (int i = 0; i < subjectCount; ++i) {
            cout << "Enter mark for Subject " << i + 1 << ": ";
            cin >> marks[i];
        }
    }

    void display() const override {
        int total = 0;
        for (const auto& mark : marks) {
            total += mark;
        }
        cout << "Total Percentage: " << (total / marks.size()) << "%" << endl;
    }
};

void writeRecord(const Achievement& student) {
    ofstream fout("filename", ios::out | ios::binary | ios::app);
    fout.write(reinterpret_cast<const char*>(&student), sizeof(student));
}

void displayRecords() {
    Achievement student;
    ifstream fin("filename", ios::binary);
    while (fin.read(reinterpret_cast<char*>(&student), sizeof(student))) {
        student.display();
    }
}

int main() {
    int n, choice;
    cout << "*******STUDENT MANAGEMENT SYSTEM*******" << endl;
    cout << "Enter number of students: ";
    cin >> n;

    vector<Achievement> students(n); // Use vector for dynamic size
    Result* resultPtr = nullptr;
    TotalMarks totalMarks;
    Percentage percentage;

    do {
        cout << "1. Read\n2. Display\n3. Search\n4. Display count\n5. Display total marks\n6. Display percentage\n7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            for (auto& student : students) {
                student.AcademicStudent::read();
                student.PersonalStudent::read();
                student.read();
            }
            break;
        case 2:
            for (const auto& student : students) {
                student.AcademicStudent::display();
                student.PersonalStudent::display();
                student.display();
            }
            break;
        case 3:
            int key;
            cout << "Enter Roll No. to Search: ";
            cin >> key;
            search(key, students);
            break;
        case 4:
            AcademicStudent::displayCount();
            break;
        case 5:
            resultPtr = &totalMarks;
            resultPtr->read();
            resultPtr->display();
            break;
        case 6:
            resultPtr = &percentage;
            resultPtr->read();
            resultPtr->display();
            break;
        case 7:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice" << endl;
        }
    } while (choice != 7);

    return 0;
}
